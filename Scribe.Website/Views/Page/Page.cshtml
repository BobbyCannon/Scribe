@model PageView

@{
	ViewBag.Title = Model.Title;
}
<div id="page" ng-controller="controller">
	<div id="pageHeader" class="row">
		<div class="span12">
			<h1 id="pageTitle">{{ model.title }}</h1>
			<small ng-show="model.editingBy.length > 0">
				This page is currently being edited by {{ model.editingBy }}.
			</small>
		</div>
		<div class="span12 text-right-then-center hideForPrint">
			@if (Request.IsAuthenticated && Model.Id > 0)
			{
				<a id="pageEditingByLink" ng-href="/EditPage/{{ model.id }}/{{ model.titleForLink }}" ng-show="model.editingBy.length === 0 || model.editingBy == currentUser">Edit</a>
				<a id="pagePublishLink" class="clickable" ng-click="update('pending')" ng-show="model.approvalStatus === 'none'" Title="Request this page to be published as public content.">Publish</a>
				<a id="pageApproveLink" class="clickable" ng-click="update('approve')" ng-show="model.approvalStatus === 'pending' && userHasTag('approver')" Title="Approve this page to be published as public content.">Approve</a>
				<a id="pageApproveLink" class="clickable" ng-click="update('reject')" ng-show="model.approvalStatus === 'pending'  && userHasTag('approver')" Title="Reject this page be be published as public content.">Reject</a>
				<a id="pageApproveLink" class="clickable" ng-click="update('publish')" ng-show="model.approvalStatus === 'approved' && userHasTag('publisher') && !model.isPublished" Title="Published as public content.">Publish</a>
				<a id="pageApproveLink" class="clickable" ng-click="update('unpublish')" ng-show="model.approvalStatus === 'approved' && userHasTag('publisher') && model.isPublished" Title="Unpublished as public content.">Unpublish</a>
			}
		</div>
	</div>
	<div id="pageContent">
		@Html.Raw(Model.Html)
	</div>
	<div id="pageFooter" class="hideForPrint" ng-show="model.id > 0">
		<div class="darkGray pull-right">
			<span ng-repeat="$tag in model.tags">
				<a class="margin-0" ng-attr-id="{{ 'tag-' + $tag }}" ng-href="/PagesWithTag/{{ $tag }}">{{ $tag }}</a><span ng-show="$index < model.tags.length - 1">,</span>
			</span>
		</div>
		This page was last updated <span id="pageLastModified">{{ model.lastModified }}</span> ago by <span id="pageCreatedBy">{{ model.createdBy }}</span>.
		<a id="pageHistoryLink" ng-href="/PageHistory/{{ model.id }}/{{ model.titleForLink }}">History</a>
		@if (Request.IsAuthenticated && Model.Id > 0)
		{
			<a id="pageEditingByLink2" ng-href="/EditPage/{{ model.id }}/{{ model.titleForLink }}" ng-show="model.editingBy.length === 0 || model.editingBy == currentUser">Edit</a>
			<a id="pagePublishLink2" class="clickable" ng-click="update('pending')" ng-show="model.approvalStatus === 'none'" Title="Request this page to be published as public content.">Publish</a>
			<a id="pageApproveLink2" class="clickable" ng-click="update('approve')" ng-show="model.approvalStatus === 'pending' && userHasTag('approver')" Title="Approve this page to be published as public content.">Approve</a>
			<a id="pageApproveLink2" class="clickable" ng-click="update('reject')" ng-show="model.approvalStatus === 'pending'  && userHasTag('approver')" Title="Reject this page be be published as public content.">Reject</a>
			<a id="pageApproveLink2" class="clickable" ng-click="update('publish')" ng-show="model.approvalStatus === 'approved' && userHasTag('publisher') && !model.isPublished" Title="Published as public content.">Publish</a>
			<a id="pageApproveLink2" class="clickable" ng-click="update('unpublish')" ng-show="model.approvalStatus === 'approved' && userHasTag('publisher') && model.isPublished" Title="Unpublished as public content.">Unpublish</a>
			<a id="pageApproveLink2" class="clickable" ng-click="update('sethomepage')" ng-show="userHasTag('administrator') && !model.isHomePage" Title="Make this page the homepage.">Homepage</a>

			<span id="pageEditingBySpan" ng-show="model.editingBy.length > 0">
				<br />This page is currently being edited by <span id="pageEditingBy">{{ model.editingBy }}</span>.
			</span>
			<span id="pagePublishPendingSpan" ng-show="model.approvalStatus === 'pending'">
				<br />This page is currently waiting to be approved.
			</span>
			<span id="pagePublishApprovedSpan" ng-show="model.approvalStatus === 'approved' && !model.isPublished">
				<br />This page is currently waiting to be publishing.
			</span>
			<span id="pagePublishApprovedSpan" ng-show="model.approvalStatus === 'approved' && model.isPublished">
				<br />This page is currently published and viewable by guest.
			</span>
		}
		<a id="pageUpdatedLink" class="clickable" ng-show="model.hasBeenUpdated" ng-click="reload()">The page has been updated. Click here to reload.</a>
	</div>
</div>
@section scripts
{
	<script type="text/javascript">

		scribe.controller('controller', [
			'$scope', '$http', '$window',
			function ($scope, $http, $window) {
				'use strict';

				$scope.model = @(Html.Raw(Model.ToJson()));
				$scope.currentUser = '@(Request.RequestContext.HttpContext.User.Identity.GetDisplayName())';
				$scope.currentUserTags = '@(Html.Raw(Request.RequestContext.HttpContext.User.Identity.GetTags().ToJson()))';

				$scope.userHasTag = function (tag) {
					var index = $scope.currentUserTags.indexOf(tag);
					return index >= 0;
				}

				$scope.update = function (status) {
					var message = 'Are you sure you want to update this page?';

					switch (status) {
						case 'approve':
							message = 'Are you sure you want to approve this page?';
							break;

						case 'reject':
							message = 'Are you sure you want to reject this page?';
							break;

						case 'publish':
							message = 'Are you sure you want to publish this page?';
							break;

						case 'unpublish':
							message = 'Are you sure you want to unpublish this page?';
							break;
					}

					if (!confirm(message)) {
						return;
					}

					var update = {
						id: $scope.model.id,
						type: status
					};

					$http.post('/api/Service/UpdatePage', update)
						.success(function (model) {
							$scope.model = model;
						})
						.error(function (error) {
							if (error.message) {
								toastr.error(error.message);
							} else {
								toastr.error('There was issue updating the page.');
							}
						});
				}

				$scope.reload = function () {
					$window.location.reload();
				}

				var service = $.connection.notificationHub;

				service.client.pageAvailableForEdit = function (id) {
					if ($scope.model.id !== id) {
						return;
					}

					$scope.$apply(function () {
						$scope.model.editingBy = '';
					});
				};

				service.client.pageLockedForEdit = function (id, editorName) {
					if ($scope.model.id !== id || editorName === $scope.currentUser) {
						return;
					}

					$scope.$apply(function () {
						$scope.model.editingBy = editorName;
					});
				}

				service.client.pageUpdated = function (id) {
					if ($scope.model.id !== id) {
						return;
					}

					$scope.$apply(function () {
						toastr.info("This page has been updated.");
						$scope.model.hasBeenUpdated = true;
					});
				};

				$.connection.hub.start();
			}
		]);
	</script>
}